type Activity implements OneKeyEntity {
    id: ID!
    title: KeyedString!
    role: KeyedString!
    phone: String
    fax: String
    webAddress: String
    lastUpdateDate: Date!
    individual: Individual!
    workplace: Workplace!
}

type ActivityFragment implements OneKeyEntity {
    id: ID!
    title: KeyedString!
    role: KeyedString!
    phone: String
    fax: String
    webAddress: String
    lastUpdateDate: Date!
    individual: IndividualFragment!
    workplace: Workplace!
}

type ActivityResult {
    distance: Int
    relevance: Int
    activity: ActivityFragment!
}

type Address {
    longLabel: String!
    buildingLabel: String
    country: KeyedString!
    county: KeyedString
    city: KeyedString!
    postalCode: String!
    location: Geopoint
}

input CountyQuery {
    county: String!
}

type DailyOpenHours {
    day: Day
    openPeriods: [OpenPeriod!]!
}

input DataQualityAssessment {
    grade: QualityGrade!
    comment: String
}

scalar Date

enum Day {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum GeoAccurracy {
    HouseNumber
}

type Geopoint {
    lat: Float!
    long: Float!
    accurracy: GeoAccurracy!
}

input GeopointQuery {
    lat: Float!
    long: Float!
    distanceMeter: Float
}

type History {
    consultedIndivituals: [IndividualQueryEntry!]!
    ranQueries: [HistoryQueryEntry!]!
}

type HistoryQueryEntry {
    createdDate: Date
    entry: QueryDetail
}

type Individual implements OneKeyEntity {
    id: ID!
    title: String
    firstName: String
    lastName: String!
    middleName: String
    maidenName: String
    mailingName: String
    firstNameInitials: String
    nickname: String
    suffixName: String
    professionalType: KeyedString!
    specialties: [KeyedString!]!
    lastUpdateDate: Date!
    webAddress: String
    mainActivity: Activity!
    otherActivities: [Activity!]!
}

type IndividualFragment implements OneKeyEntity {
    id: ID!
    title: String
    firstName: String
    lastName: String!
    middleName: String
    maidenName: String
    mailingName: String
    firstNameInitials: String
    nickname: String
    suffixName: String
    professionalType: KeyedString!
    specialties: [KeyedString!]!
    lastUpdateDate: Date!
    webAddress: String
}

type IndividualQueryEntry {
    createdDate: Date
    entry: IndividualFragment
}

type KeyedString {
    label: String!
    key: String!
}

type Mutation {
    postDataQualityAssesmentForActivity(
        activityId: ID!
        grade: DataQualityAssessment!
    ): String
    postRevisionRequest(request: RevisionRequest!): String
    ForgetHistoryEntries(individuals: [ID!], queries: [ID!]): String
}

interface OneKeyEntity {
    id: ID!
    lastUpdateDate: Date!
}

type OpenPeriod {
    open: Time
    close: Time
}

enum QualityGrade {
    OK
    NOK
}

type Query {
    individualByID(
        apiKey: String!
        userId: String
        id: ID!
        locale: String
    ): Individual
    activityByID(
        apiKey: String!
        userId: String
        id: ID!
        locale: String
    ): Activity
    activities(
        apiKey: String!
        userId: String
        criteria: String!
        locale: String
        professionalType: String
        specialties: [String!]
        location: GeopointQuery
        county: CountyQuery
    ): [ActivityResult]
    history(apiKey: String!, userId: String!): History
}

type QueryDetail {
    id: ID!
    criteria: String!
    locale: String
    professionalType: String
    specialties: String
    location: Geopoint
    county: String
}

input RevisionRequest {
    id: ID!
}

scalar Time

type WeeklyOpenHours {
    openDays: [DailyOpenHours!]!
}

type Workplace implements OneKeyEntity {
    id: ID!
    name: String!
    officialName: String
    type: String!
    localPhone: String
    intlPhone: String
    intlFax: String
    webAddress: String
    emailAddress: String
    lastUpdateDate: Date!
    address: Address!
    openHours: WeeklyOpenHours
    parentWorkplace: Workplace
    activities: [Activity!]!
}