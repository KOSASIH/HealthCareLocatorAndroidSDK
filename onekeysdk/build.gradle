apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'com.apollographql.apollo'
apply plugin: 'maven'
apply plugin: 'maven-publish'

android {
    compileSdkVersion build_versions.compile_sdk_version
    buildToolsVersion build_versions.build_tool_version

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0.0"

        Properties properties = new Properties()
        if (rootProject.file("map.properties").exists()) {
            properties.load(rootProject.file("map.properties").newDataInputStream())
        }
        manifestPlaceholders = [mapsApiKey: properties.getProperty("MAPS_API_KEY", "")]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "modificationUrl", "https://onekeysdk.ekinoffy.com/%s/suggest-modification?apiKey=%s&id=%s"
        }
        debug{
            resValue "string", "modificationUrl", "https://onekeysdk.ekinoffy.com/%s/suggest-modification?apiKey=%s&id=%s"
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        def base = "base"
        def customization = "customization"
        def categories = [base, customization]
        main {
            for (category in categories) {
                res.srcDirs += "src/components/$category/res"
                java.srcDirs += "src/components/$category/java"
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        // if true, stop the gradle build if errors are found
        abortOnError false
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "documentation"
        packageOptions {
            prefix = "com.ekino.onekeysdk"
            suppress = true
        }
        packageOptions {
            prefix = "com.ekino.onekeysdk.model"
            suppress = false
        }
        packageOptions {
            prefix = "base"
            suppress = true
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation('androidx.recyclerview:recyclerview:1.1.0') { transitive(true) }
    implementation("androidx.cardview:cardview:1.0.0") { transitive(true) }
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation("org.osmdroid:osmdroid-android:6.1.8") { transitive(true) }
    implementation("io.reactivex.rxjava2:rxjava:2.2.16") { transitive(true) }
    implementation('com.github.tbruyelle:rxpermissions:0.10.2') { transitive(true) }

    implementation("com.squareup.retrofit2:retrofit:$versions.retrofit") { transitive(true) }
    implementation("com.squareup.retrofit2:converter-gson:$versions.retrofit") { transitive(true) }
    implementation("com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$versions.rxJavaAdapter") { transitive(true) }
    implementation("com.squareup.okhttp3:okhttp:4.9.0") { transitive(true) }
    testImplementation("com.squareup.okhttp3:mockwebserver:4.9.0") { transitive(true) }
    implementation("com.squareup.okhttp3:logging-interceptor:$versions.okHttpIntercepter") { transitive(true) }
    implementation("io.reactivex.rxjava2:rxandroid:$versions.rxAndroidVersion") { transitive(true) }
    implementation("com.jakewharton.rxbinding2:rxbinding:$versions.rxBinding") { transitive(true) }
    implementation("com.apollographql.apollo:apollo-runtime:2.4.4") { transitive(true) }
    implementation("com.apollographql.apollo:apollo-android-support:2.4.4") { transitive(true) }
    implementation("com.apollographql.apollo:apollo-rx2-support:2.4.4") { transitive(true) }

    /**
     * Google services
     */
    implementation "com.google.android.gms:play-services-maps:16.0.0"
    implementation "com.google.android.gms:play-services-location:16.0.0"
    implementation 'com.google.android.libraries.places:places:1.1.0'
    implementation 'com.google.maps.android:android-maps-utils:0.5+'
    compileOnly "org.jetbrains:annotations:13.0"
    testImplementation "com.google.truth:truth:1.0.1"

}
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:" + System.getenv("HOME") + "/.m2/repository")
            pom.version = '1.0.0'
            pom.groupId = 'com.iqvia.healthcare-locator'
            pom.artifactId = 'healthcare-locator-sdk'
        }
    }
}
publishing {
    publications {
        aar(MavenPublication) {
            groupId 'com.iqvia.healthcare-locator'
            artifactId 'healthcare-locator-sdk'
            version '1.0.0'

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
        }
    }
    repositories {
        maven {
            url("file:" + System.getenv("HOME") + "/.m2/repository")
        }
    }
}
